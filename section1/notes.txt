# Chapter - 1

## Haskel - lazy evaluator

example - double(double(double(xs)))
imperative programming languages pass through the entire list xs once
to double each element
create a new list with the doubled values
pass this list to the next function

So requires mulitple passes over the list.


functional programming perspective:
firt call (double(xs)):
haskel doesn't immediately compute the doubled list. its just a functional call

The first doubleMe (from the innermost call) requests the value for the first element, so it computes the doubled value 2 (from 1).
The second doubleMe receives 2 and doubles it to 4.
Finally, the first doubleMe doubles 4 to 8 and returns the first element of the final list as 8.

haskel - statically typed, automatic type inference


### Haskel - concatenation(++) vs cons(:)

when we put together two list, haskell has to walk through the entire first list (the one on the left side of ++)
Howeverm adding something to the beginning of a list is a nearly instantaneous operation

: => first operator is single element
++ => 2 parameters as list



### More list Operations

head => first element
tail => excpet first element
last => last element
init => except last element


### List Comprehension

similar to set comprehensions.
predicates are applied after the computations are performed
drawing values from several lists, every combination of elements.

_ => temporary variable


### tuples
heterogeneous and fixed size
unlike list we cant compare the two tuples


### zip functon
used to produce list of pairs. parameter : two lists
